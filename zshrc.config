
READNULLCMD=${PAGER:-/usr/bin/pager}
typeset -ga debian_missing_features
if [[ -z "${DEBIAN_PREVENT_KEYBOARD_CHANGES-}" ]] &&
   [[ "$TERM" != 'emacs' ]]
then
    typeset -A key
    key=(
        BackSpace  "${terminfo[kbs]}"
        Home       "${terminfo[khome]}"
        End        "${terminfo[kend]}"
        Insert     "${terminfo[kich1]}"
        Delete     "${terminfo[kdch1]}"
        Up         "${terminfo[kcuu1]}"
        Down       "${terminfo[kcud1]}"
        Left       "${terminfo[kcub1]}"
        Right      "${terminfo[kcuf1]}"
        PageUp     "${terminfo[kpp]}"
        PageDown   "${terminfo[knp]}"
    )
    function bind2maps () {
        local i sequence widget
        local -a maps
        while [[ "$1" != "--" ]]; do
            maps+=( "$1" )
            shift
        done
        shift
        sequence="${key[$1]}"
        widget="$2"
        [[ -z "$sequence" ]] && return 1
        for i in "${maps[@]}"; do
            bindkey -M "$i" "$sequence" "$widget"
        done
    }
    bind2maps emacs             -- BackSpace   backward-delete-char
    bind2maps       viins       -- BackSpace   vi-backward-delete-char
    bind2maps             vicmd -- BackSpace   vi-backward-char
    bind2maps emacs             -- Home        beginning-of-line
    bind2maps       viins vicmd -- Home        vi-beginning-of-line
    bind2maps emacs             -- End         end-of-line
    bind2maps       viins vicmd -- End         vi-end-of-line
    bind2maps emacs viins       -- Insert      overwrite-mode
    bind2maps             vicmd -- Insert      vi-insert
    bind2maps emacs             -- Delete      delete-char
    bind2maps       viins vicmd -- Delete      vi-delete-char
    bind2maps emacs viins vicmd -- Up          up-line-or-history
    bind2maps emacs viins vicmd -- Down        down-line-or-history
    bind2maps emacs             -- Left        backward-char
    bind2maps       viins vicmd -- Left        vi-backward-char
    bind2maps emacs             -- Right       forward-char
    bind2maps       viins vicmd -- Right       vi-forward-char
    
    
    if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
        function zle-line-init () {
            emulate -L zsh
            printf '%s' ${terminfo[smkx]}
        }
        function zle-line-finish () {
            emulate -L zsh
            printf '%s' ${terminfo[rmkx]}
        }
        zle -N zle-line-init
        zle -N zle-line-finish
    else
        for i in {s,r}mkx; do
            (( ${+terminfo[$i]} )) || debian_missing_features+=($i)
        done
        unset i
    fi
    unfunction bind2maps
fi 
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin \
                                           /usr/local/bin  \
                                           /usr/sbin       \
                                           /usr/bin        \
                                           /sbin           \
                                           /bin            \
                                           /usr/X11R6/bin
(( ${+aliases[run-help]} )) && unalias run-help
autoload -Uz run-help
if (( ${${(@f)"$(</etc/os-release)"}[(I)ID*=*ubuntu]} )) &&
   [[ -z "$skip_global_compinit" ]]; then
  autoload -U compinit
  compinit
fi
alias pwsh="/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe"
play() {
    
    if [ -z "$1" ]; then
        echo "用法: play <B站视频URL或BV号> [分P号]"
        return 1
    fi
    
    local url
    if [[ "$1" =~ ^BV[a-zA-Z0-9]{10,13}$ ]]; then
        url="https://www.bilibili.com/video/$1"
    else
        url="$1"
    fi
    
    if [ -n "$2" ]; then
        url="${url}?p=$2"
    fi
    
    echo -e "\n\033[1;33m开始播放（终端字符渲染模式）...\033[0m"
    echo "URL: $url"
    echo -e "提示: \n  空格键=暂停/继续\n  ← →=调整进度\n  q=退出\n"
    
    mpv --vo=caca \
        --ytdl-format="bestvideo[height<=480]+bestaudio" \
        --profile=fast \
        "$url"
}
bili() {
    
    local keyword=""
    local action=""  
    local item_index=0
    local args=()
    
    while [[ $
        case "$1" in
            -l)
                action="list"
                
                if [[ $2 =~ ^[1-9][0-9]*$ ]]; then
                    item_index=$2
                    shift
                fi
                ;;
            -c)
                action="copy"
                
                if [[ $2 =~ ^[1-9][0-9]*$ ]]; then
                    item_index=$2
                    shift
                else
                    item_index=1  
                fi
                ;;
            *)
                args+=("$1")
                ;;
        esac
        shift
    done
    
    keyword="${args[*]}"
    
    local output
    output=$(chromium --headless --disable-gpu --dump-dom "https://search.bilibili.com/all?keyword=${keyword// /%20}" 2>    perl -0777 -ne 'while (/<div class="bili-video-card[^>]*>.*?<a[^>]*href="[^"]*\/(BV[0-9A-Za-z]{10})[^"]*"[^>]*>.*?<>        $bv = $1;
        $title = $2;
        $title =~ s/<[^>]+>//g;  
        $title =~ s/&amp;/\&/g;   
        $title =~ s/&lt;/</g;
        $title =~ s/&gt;/>/g;
        $title =~ s/&quot;/"/g;
        $title =~ s/&
        print "$bv $title\n";
    }')
    
    case "$action" in
        list)
            if [[ $item_index -gt 0 ]]; then
                
                play $(echo "$output" | sed -n "${item_index}p" | awk '{print $1}')
            else
                
                echo "$output"
            fi
        copy)
            
            local bv=$(echo "$output" | sed -n "${item_index}p" | awk '{print $1}')
            if [[ -n "$bv" ]]; then
                
                webtext "https://www.bilibili.com/video/$bv"
                echo "已复制第${item_index}个结果的链接: https://www.bilibili.com/video/$bv"
            else
                echo "未找到第${item_index}个结果"
            fi
            ;;
        *)
            
            echo "$output"
            ;;
    esac
}
bing() {
    
    local keyword=""
    local list_mode=false
    local item_index=0
    local args=()
    
    for arg in "$@"; do
        if [[ "$arg" == "-l" ]]; then
            list_mode=true
        elif [[ "$list_mode" == true ]]; then
            item_index=$arg
            list_mode=false
        else
            args+=("$arg")
        fi
    done
    
    keyword="${args[*]}"
    
    local output
    output=$(chromium --headless --disable-gpu --dump-dom "https://www.bing.com/search?q=${keyword// /%20}" 2>/dev/null>    perl -0777 -ne 'while (/<li class="b_algo"[^>]*>.*?<h2[^>]*><a[^>]*href="([^"]*)"[^>]*>(.*?)<\/a><\/h2>.*?<\/li>/gs>        $url = $1;
        $title = $2;
        $title =~ s/<[^>]+>//g;  
        $title =~ s/&amp;/\&/g;   
        $title =~ s/&lt;/</g;
        $title =~ s/&gt;/>/g;
        $title =~ s/&quot;/"/g;
        $title =~ s/&
        print "$url\n\t$title\n";
    }')
    
    if [[ $item_index -gt 0 ]]; then
        
        local url_line=$((item_index * 2 - 1))
        webtext $(echo "$output" | sed -n "${url_line}p")
    else
        
        echo "$output"
    fi
}
webtext() {
    if ! command -v chromium &> /dev/null; then
        echo "Error: chromium-browser is required but not installed. Install with:"
        echo "  Debian/Ubuntu: sudo apt install chromium-browser"
        echo "  Fedora/RHEL: sudo dnf install chromium"
        return 1
    fi
    if [ $
        echo "Usage: webtext <URL>"
        return 1
    fi
    chromium --headless --disable-gpu --dump-dom "$1" 2>/dev/null | \
    perl -0777 -pe '
        
        s/<script\b[^>]*>[\s\S]*?<\/script>//gi;
        s/<style\b[^>]*>[\s\S]*?<\/style>//gi;
        
        s/<\/(p|div|h1|h2|h3|h4|h5|h6|article|section|header|footer|blockquote|li|br)>/\n\n/gi;
        
        s/<[^>]+>/ /g;
        
        s/&amp;/&/g;
        s/&lt;/</g;
        s/&gt;/>/g;
        s/&quot;/"/g;
        s/&
        s/&nbsp;/ /g;
        s/&copy;/(c)/g;
        s/&reg;/(r)/g;
        
        s/^\s+|\s+$//mg;  
        s/\s+/ /g;        
        s/\n{3,}/\n\n/g;  
    ' | \
    awk '{
        gsub(/\\n/, "\n");   
        gsub(/\\t/, "  ");   
        
        if ($0 != "") {
            print $0;
        }
    }'
}
